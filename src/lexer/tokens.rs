#[derive(Debug)]
pub enum TokenOld {
    Number(TokenValue),
    Let(TokenValue),
    Import(TokenValue),
    String(TokenValue),
    Keyword(TokenValue),
    Go(TokenValue),
    If(TokenValue),
    Else(TokenValue),
    True(TokenValue),
    False(TokenValue),
    Return(TokenValue),
    Match(TokenValue),
    Operator(TokenValue),
    Identifier(TokenValue),
    Assign(TokenValue),
    LBrace(TokenValue),
    RBrace(TokenValue),
    LBracket(TokenValue),
    RBracket(TokenValue),
    Colon(TokenValue),
    LParen(TokenValue),
    RParen(TokenValue),
    Comma(TokenValue),
    Dot(TokenValue),
    Pointer(TokenValue),
    Deref(TokenValue),
    Channel(TokenValue),
    Append(TokenValue),
    PropertyAccess(TokenValue),
    NewLine(TokenValue),
    TypeKeyword(TokenValue),
    Pub(TokenValue),
    Mut(TokenValue),
    Function(TokenValue),
    Equality(TokenValue),
    GT(TokenValue),
    LT(TokenValue),
    GTE(TokenValue),
    LTE(TokenValue),
    EOF(TokenValue),
    And(TokenValue),
    Or(TokenValue),
    Pipe(TokenValue),
    TypeSeparator(TokenValue),
    Range(TokenValue),
    Comment(TokenValue),
    ReturnType(TokenValue),
    EnumKeyword(TokenValue),
    Interface(TokenValue),
    Whitespace(TokenValue),
    ErrorToken(TokenValue),
}

#[derive(Debug)]
pub enum LexerError {
    InvalidToken,
}
